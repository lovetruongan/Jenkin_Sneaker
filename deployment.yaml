services:
  mysql8-container:
    container_name: mysql8-container
    image: mysql:8.2.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: shopsneaker
    ports:
      - 3306:3306
    networks:
      - Sneaker-network

  phpmyadmin8-container:
    #intel host
    #image: phpmyadmin/phpmyadmin
    #mac m1 host
    image: arm64v8/phpmyadmin
    container_name: phpmyadmin8-container
    restart: always
    depends_on:
      - mysql8-container
    ports:
      - "8100:80" #port mapping
    environment:
      PMA_HOST: mysql8-container #phpMyAdmin Host, PMA = PHP My Amin
    networks:
      - Sneaker-network

  sneaker-spring-container:
    container_name: sneaker-spring-container
    build:
      context: .
      dockerfile: DockerfileJavaSpring
    ports:
      - 8089:8089
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3306/shopsneaker3?serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: shopsneaker3
      CHROMA_BASE_URL: http://chroma-container:8000
    #depends_on only waits for the container to start, not for the service inside the container to be fully operational
    depends_on:
      - mysql8-container
      - chroma-container
    networks:
      - Sneaker-network

  jenkins-container:
    container_name: jenkins-container
    image: jenkins/jenkins:lts
    restart: always
    privileged: true
    user: root
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - Sneaker-network

  sonarqube-container:
    container_name: sonarqube-container
    image: sonarqube:latest
    restart: always
    ports:
      - "9000:9000"
    environment:
      - SONARQUBE_JDBC_URL=jdbc:mysql://mysql8-container:3306/sonarqube?useUnicode=true&characterEncoding=utf8&useSSL=false
      - SONARQUBE_JDBC_USERNAME=root
      - SONARQUBE_JDBC_PASSWORD=admin
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - mysql8-container
    networks:
      - Sneaker-network

  sneaker-angular-container:
    container_name: sneaker-angular-container
    build:
      context: .
      dockerfile: DockerfileAngular
    ports:
      - "4200:80"
    networks:
      - Sneaker-network

  chroma-container:
    container_name: chroma-container
    image: ghcr.io/chroma-core/chroma:0.4.15
    restart: always
    environment:
      - IS_PERSISTENT=TRUE
    volumes:
      - chroma_data:/chroma/chroma/
    ports:
      - "8000:8000"
    networks:
      - Sneaker-network

#docker-compose -f ./deployment.yaml down
#docker-compose -f ./deployment.yaml rm -s -f mysql8-container
#docker-compose -f ./deployment.yaml up -d mysql8-container

#docker-compose -f ./deployment.yaml rm -s -f phpmyadmin8-container
#docker-compose -f ./deployment.yaml up -d phpmyadmin8-container
#docker-compose -f ./deployment.yaml rm -s -f sneaker-spring-container
#docker-compose -f ./deployment.yaml up -d sneaker-spring-container
#docker-compose -f ./deployment.yaml up -d sneaker-spring-container
#test
#docker-compose -f ./deployment.yaml rm -s -f sneaker-angular-container
#docker-compose -f ./deployment.yaml up -d sneaker-angular-container
#docker-compose -f ./deployment.yaml rm -s -f chroma-container
#docker-compose -f ./deployment.yaml up -d chroma-container
#docker run -d -p 9000:9000 SonarQubeimage
networks:
  Sneaker-network:
    name: Sneaker-network
    driver: bridge
    external: true

volumes:
  jenkins_home:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  chroma_data:
    driver: local
